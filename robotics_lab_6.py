# -*- coding: utf-8 -*-
"""Robotics Lab 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kvh0rawysFlryBY-cwGVgZPfNqdUkFOx
"""

# Phoebe Esser Katz
# April 19, 2025
# Robotics Lab 6: Chess part 1

import math

import numpy as   np
import sympy as   sym

import sys

################### Variables ##################################
endEffector = math.radians(90) # must be vertical

elbowToWrist = 100 # mm
shoulderToElbow = 100 # mm
shoulderOffset = 35 # mm

shoulderHyp = math.sqrt(shoulderToElbow**2 + shoulderOffset**2)

xPositions = {1:102.5, 2:138.5, 3:174.5, 4:210.5} # dictionary w X coordinates
zFinal = 40 # mm . MIGHT NEED TO CHANGE
yFinal = 0 # mm. FOR LAB 6

################## READ in
if len(sys.argv) > 1:
  pick_location = int(sys.argv[0])
  place_location = int(sys.argv[1])
else:
  print("Please provide pick and place location numbers between 1 and 4.")

#translate pick and place locations into coordinates
xFinal = xPositions[pick_location] # mm

#### inverse kinematics.
elbowIK = math.acos(((xFinal**2)+(zFinal**2)-(elbowToWrist**2)-(shoulderHyp**2)) / (2*shoulderHyp*elbowToWrist))

shoulderIKprime = math.atan2(zFinal/xFinal)-math.atan2((elbowToWrist*math.sin(elbowIK))/(shoulderHyp+elbowToWrist*(math.cos(elbowIK) ) ) ) # w hypotenuse
alpha = math.arctan2(shoulderOffset/shoulderToElbow) # accounting for offset
shoulderIK = shoulderIKprime + alpha  #accounting for offset
#### ADD: pick viable solution (pick solution where shoulder angle is greatest)

wristIK = endEffector - elbowIK - shoulderIK # bc total will always be vertical

waistIK = atan(xFinal/yFinal) # waist angle can be treated separately

#### translate coordinate systems (use function)
print('The waist angles is {:.4} radians'.format(waistIK))

#### move robot to pick up location / pick up

#### move robot to drop off location / drop off

#### go to sleep